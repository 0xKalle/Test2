language: cpp
dist: trusty
sudo: false
matrix:
  include:
  - os: linux
    env: PYTHON=2.7 CPPV=11 GCC=4.8
    addons:
      apt:
        packages: [cmake=2.\*, cmake-data=2.\*]
  - os: linux
    env: PYTHON=3.6 CPPV=11 GCC=4.8
    addons:
      apt:
        sources: [deadsnakes]
        packages: [python3.6-dev python3.6-venv, cmake=2.\*, cmake-data=2.\*]
  - sudo: true
    services: docker
    env: PYTHON=2.7 CPPV=14 GCC=6
  - sudo: true
    services: docker
    env: PYTHON=3.5 CPPV=14 GCC=6
  - os: osx
    osx_image: xcode7.3
    env: PYTHON=2.7 CPPV=14 CLANG
  - os: osx
    osx_image: xcode7.3
    env: PYTHON=3.5 CPPV=14 CLANG
before_install:
- pyenv global $(pyenv whence 2to3)  # activate all python versions
- PY_CMD=python3
- $PY_CMD -m pip install --user --upgrade pip wheel
- |
  # Configure build variables
  if [ "$TRAVIS_OS_NAME" = "linux" ]; then
    if [ -z "$GCC" ]; then export GCC=4.8; fi
    export CXX=g++-$GCC CC=gcc-$GCC;
    if [ "$GCC" = "6" ]; then export DOCKER=debian:stretch CXX=g++ CC=gcc; fi
  elif [ "$TRAVIS_OS_NAME" = "osx" ]; then
    export CXX=clang++ CC=clang;
  fi
  if [ -n "$CPPV" ]; then export CPPV=-std=c++$CPPV; fi
  if [ "${PYTHON:0:1}" = "3" ]; then export PY=3; fi
- |
  # Initialize environment
  if [ -n "$DOCKER" ]; then
    docker pull $DOCKER
    # Disable LTO with gcc until gcc 79296 is fixed:
    export CMAKE_EXTRA_ARGS="${CMAKE_EXTRA_ARGS} -DPYBIND11_LTO_CXX_FLAGS="
    export containerid=$(docker run --detach --tty \
      --volume="$PWD":/pybind11 --workdir=/pybind11 \
      --env="CC=$CC" --env="CXX=$CXX" --env="DEBIAN_FRONTEND=$DEBIAN_FRONTEND" \
      --env=GCC_COLORS=\  \
      $DOCKER)
    docker exec --tty "$containerid" sh -c 'for s in 0 15; do sleep $s; apt-get update && apt-get -qy dist-upgrade && break; done'
    export SCRIPT_RUN_PREFIX="docker exec --tty $containerid"
  else
    if [ "$TRAVIS_OS_NAME" = "linux" ]; then
      pip install --user --upgrade pip virtualenv
      virtualenv -p python$PYTHON venv
    elif [ "$TRAVIS_OS_NAME" = "osx" ]; then
      #brew update; brew tap homebrew/boneyard; brew install clang-omp;
      if [ "$PY" = "3" ]; then
        brew update && brew upgrade python;
      else
        curl -fsSL -O https://bootstrap.pypa.io/get-pip.py
        sudo -H python get-pip.py
      fi
      pip$PY install --user --upgrade pip virtualenv
      python$PY -m virtualenv venv
    fi
    source venv/bin/activate
  fi
install:
- |
  $PY_CMD -m pip install --user --upgrade sphinx sphinx_rtd_theme breathe flake8 pep8-naming pytest
  # Install dependencies
  set -e
  if [ -n "$DOCKER" ]; then
    if [ -n "$DEBUG" ]; then
      PY_DEBUG="python$PYTHON-dbg python$PY-scipy-dbg"
      CMAKE_EXTRA_ARGS+=" -DPYTHON_EXECUTABLE=/usr/bin/python${PYTHON}dm"
    fi
    $SCRIPT_RUN_PREFIX sh -c "for s in 0 15; do sleep \$s; \
      apt-get -qy --no-install-recommends install \
        $PY_DEBUG python$PYTHON-dev python$PY-pytest python$PY-scipy \
        libeigen3-dev libboost-dev cmake make ${EXTRA_PACKAGES} && break; done"
  else
    if [ "$CLANG" = "5.0" ]; then
      if ! [ -d ~/.local/include/c++/v1 ]; then
        # Neither debian nor llvm provide a libc++ 5.0 deb; luckily it's fairly quick
        # to build, install (and cache), so do it ourselves:
        git clone --depth=1 https://github.com/llvm-mirror/llvm.git llvm-source
        git clone https://github.com/llvm-mirror/libcxx.git llvm-source/projects/libcxx -b release_50
        git clone https://github.com/llvm-mirror/libcxxabi.git llvm-source/projects/libcxxabi -b release_50
        mkdir llvm-build && cd llvm-build
        # Building llvm requires a newer cmake than is provided by the trusty container:
        CMAKE_VER=cmake-3.8.0-Linux-x86_64
        curl https://cmake.org/files/v3.8/$CMAKE_VER.tar.gz | tar xz
        ./$CMAKE_VER/bin/cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=~/.local ../llvm-source
        make -j2 install-cxxabi install-cxx
        cp -a include/c++/v1/*cxxabi*.h ~/.local/include/c++/v1
        cd ..
      fi
      export CXXFLAGS="-isystem $HOME/.local/include/c++/v1 -stdlib=libc++"
      export LDFLAGS="-L$HOME/.local/lib -fuse-ld=lld-$CLANG"
      export LD_LIBRARY_PATH="$HOME/.local/lib${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}"
      if [ "$CPP" = "-std=c++17" ]; then CPP="-std=c++1z"; fi
    fi
    export NPY_NUM_BUILD_JOBS=2
    echo "Installing pytest, numpy, scipy..."
    ${PYPY:+travis_wait 30} $PY_CMD -m pip install --user --upgrade pytest numpy scipy \
        ${PYPY:+--extra-index-url https://imaginary.ca/trusty-pypi}
    echo "done."
    mkdir eigen
    curl -fsSL https://bitbucket.org/eigen/eigen/get/3.3.4.tar.bz2 | \
        tar --extract -j --directory=eigen --strip-components=1
    export CMAKE_INCLUDE_PATH="${CMAKE_INCLUDE_PATH:+$CMAKE_INCLUDE_PATH:}$PWD/eigen"
  fi
  set +e

script:
- "$SCRIPT_RUN_PREFIX pwd"
- "$SCRIPT_RUN_PREFIX  ./install-lis.sh"
- "$SCRIPT_RUN_PREFIX  echo $LD_LIBRARY_PATH"
- "$SCRIPT_RUN_PREFIX pwd"
- "$SCRIPT_RUN_PREFIX ls -alh"
- "$SCRIPT_RUN_PREFIX echo python$PYTHON"
- "$SCRIPT_RUN_PREFIX echo $CPPV"
- "$SCRIPT_RUN_PREFIX ./install-pybind11.sh python$PYTHON $CPPV ${CMAKE_EXTRA_ARGS}"
- "$SCRIPT_RUN_PREFIX pwd"
- "$SCRIPT_RUN_PREFIX ls -alh"
- "$SCRIPT_RUN_PREFIX ./clean.sh"
- "$SCRIPT_RUN_PREFIX python$PYTHON --version"
- |
  if [ "$TRAVIS_OS_NAME" = "linux" ]; then
      $SCRIPT_RUN_PREFIX python$PYTHON build.py build_ext --inplace
   elif [ "$TRAVIS_OS_NAME" = "osx" ]; then
      $SCRIPT_RUN_PREFIX python$PYTHON build_mac.py build_ext --inplace
   fi
- "$SCRIPT_RUN_PREFIX ls -alh"
- "$SCRIPT_RUN_PREFIX ./run_test.sh python$PYTHON"
- "$SCRIPT_RUN_PREFIX cat residuals.log"
after_script:
- if [ -n "$DOCKER" ]; then docker stop "$containerid"; docker rm "$containerid";
  fi
notifications:
  email:
    recipients:
      secure: da70mnM8HmZa3K78IhS4QyEdoxZkgKjqkTnKB30Qbz0qsWg9rdayUTAnk8zi5R+ik9V3NAWSdzyhsMRSB9/j9+YQFNmoa8C95tBWgTOuc2t1XHQgWyMu/32CC4wypdXe3z8pdrncG9G04GZ6Dr9zt8+Jz9LBHA693oLAO+SUgamFk0vV60kxTX6KE+HNOIEfVY6NDas2EGx1KWXxb63l83iNDr/2ax3m4mnOtm48zml5W4qsDlQiJpd0Kq4OEuMdEmro0c4dO/0BcroPqycz/Ek0WXOih03FKR3P+ed72YpmwzivO+OQm5bvay8oq9lsRn9J3/UjdePdoBdN0e62U0cshfe4Cb5IDEZHrJv03uoTQFw+NtA9KKCa7omJ3x+S3c6STYRsgBFP53HaV9ECrUbONYkOTZHBj6xzpZdVqXluTdeRxly/5lMTdYnpUW7jfNlAce6nR2RycjeGr4/Jz2EF9ZxyN4jS9VrcUyJyyOFKJm+S8mcR/nuyp9YtEK0gaS4Sjp4r4PDyS3u8TZnjeHrmpYDDek671cig9t6VoM+oSRdfYac8M2e23flYz3qGflWaosYBZ6IYhmCq4ZsXsBdvZQpa3WgbXPlPsZ1T/PHnIfDoXxOYhfKv+5nzGBL266IWdqnG15E33Pi6Bcg7I1ZIg6bEPgX8ChYlSmyNXQo=
    on_success: always # default: change
    on_failure: always # default: always

